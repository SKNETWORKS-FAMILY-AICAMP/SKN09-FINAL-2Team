"""
Django settings for senpick project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

ALLOWED_HOSTS = ['senpick.kr', 'web', '127.0.0.1', 'localhost', os.getenv('ALLOWED_HOSTS')]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 소셜로그인 추가
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.naver',
    'app',
]

# 소셜 로그인 내용
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_VERIFICATION = 'none'

SOCIALACCOUNT_ADAPTER = 'app.adapter.MySocialAccountAdapter'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_CONFIRM_LOGIN_ON_GET = False
AUTH_USER_MODEL = 'app.User'

LOGIN_REDIRECT_URL = '/social/redirect/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

CSRF_TRUSTED_ORIGINS = [
    "https://senpick.kr",
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # 소셜로그인 기능
]

ROOT_URLCONF = 'senpick.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # 템플릿 경로 설정
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'senpick.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'senpick_db',  # 데이터베이스 이름
        'USER': os.getenv('MYSQL_USER'),        # MySQL 사용자
        'PASSWORD': os.getenv('MYSQL_PASSWORD'), # MySQL 비밀번호
        'HOST': os.getenv('MYSQL_HOST'),   # 로컬 호스트
        'PORT': '3306',        # MySQL 포트
    }
} 

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
if os.getenv("ENVIRONMENT") == 'PRODUCTION': # 배포용 환경 변수 설정
    STATIC_ROOT = os.path.join(BASE_DIR, 'static') # 배포용 세팅
else:
    STATICFILES_DIRS = [BASE_DIR / "static"] # 로컬 세팅

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 이메일 인증 관련
# 1. 이메일 백엔드 설정
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# 2. SMTP 서버 호스트 (예: Gmail SMTP, Naver SMTP 등)
# EMAIL_HOST = 'email-smtp.ap-northeast-2.amazonaws.com'       
EMAIL_HOST = 'smtp.gmail.com'

# 3. SMTP 서버 포트
EMAIL_PORT = 587

# 4. TLS/SSL 설정
EMAIL_USE_TLS = True 

# 5. SMTP 서버 로그인 계정
EMAIL_HOST_USER = os.getenv('YOUR_EMAIL')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')

# 7. 기본 발신자 주소
DEFAULT_FROM_EMAIL = 'Senpick <no-reply@senpick.com>'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_REGION = "ap-northeast-2"

AWS_STORAGE_BUCKET_NAME = "senpickbucket"
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

if os.getenv("ENVIRONMENT") == 'PRODUCTION': # 배포용 환경 변수 설정
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False

    CSRF_COOKIE_SECURE = True

    SESSION_COOKIE_SECURE = True

    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    DEBUG = True